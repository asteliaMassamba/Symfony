<?php
// src/OC/PlatformBundle/Repository/AdvertRepository.php

namespace OC\PlatformBundle\Repository;

/*
Si votre namespace est "OC\PlatformBundle\Entity"
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
*/
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository {
    
    // Le QueryBuilder et le DQL
    
    
    // Le QueryBuilder
    
    public function myFindAll() {
        // Methode 1 : en passant par l'EntityManager
        $queryBuilder = $this->_em->createQueryBuilder()
                ->select("a")
                ->from($this->_entityName, "a");
        // Dans un repository, $this->_entityName est le namespace de l'entite geree 
        // Ici, il vaut donc OC\PlatformBundle\Entity\Advert
        
        // Methode 2 : en passant par le raccourci
        $queryBuilder = $this->createQueryBuilder("a");
        
        // On n'ajoute pas de critere ou tri particulier, la construction 
        // de notre requete est finie
        
        // On recupere la Query a partir du QueryBuilder
        $query = $queryBuilder->getQuery();
        
        // On recupere les resultats a partir de la Query
        $results = $query->getResult();
        
        // On retourne ces resultats
        return $results;
    }
    
    public function myFindOne($id) {
        $qb = $this->createQueryBuilder("a");
        $qb
          ->where("a.id = :id")
          ->setParmeter("id", $id);
        
        return $qb
                ->getQuery()
                ->getResult();
    }
    
    public function findByAuthorAndDate($author, $year) {
        $qb = $this->createQueryBuilder("a");
        
        $qb->where("a.author = :author")
             ->setParameter("author", $author)
           ->andWhere("a.date < :year")
             ->setParameter("year", $year)
           ->orderBy("a.date", "DESC");
        
        return $qb->getQuery()->getResult();
    }
    
    public function whereCurrentYear(QueryBuilder $qb) {
        $qb
          ->andWhere("a.date BETWEEN :start AND :end")
            ->setParameter("start", new \DateTime(date("Y")."-01-01"))
            ->setParameter("end", new \DateTime(date("Y")."-12-31"));
    }
    
    public function myFind() {
        $qb = $this->createQueryBuilder("a");
        
        // On peut ajouter ce qu'on veut avant
        $qb
          ->where("a.author = :author")
            ->setParameter("author", "Marine");
        
        // On applique notre condition sur le QueryBuilder
        $this->whereCurrentYear($qb);
        
        // On peut ajouter ce qu'on veut apres
        $qb->orderBy("a.date", "DESC");
        
        return $qb->getQuery()->getResult();
    }
    
    public function exemple1() {
        $qb = $this->createQueryBuilder("a");
        
        $listAdverts1 = $qb->getQuery()->getResult();
        foreach ($listAdverts1 as $advert) {
            // $advert est une instance d'Advert dans notre exemple
            $advert->getContent();
        }
        
        $listAdverts2 = $qb->getQuery()->getArrayResult();
        foreach ($listAdverts2 as $advert) {
            // $advert est un tableau
            // Faire $advert->getContent() est impossible. Vous devez faire :
            $advert["content"];
        }
    }
    
    public function exemple2() {
        $qb = $this->createQueryBuilder("a");
        
        $values = $qb->getQuery()->getScalarResult();
        foreach ($values as $value) {
            // $value est la valeur de ce qui a ete selectionne : un nombre, un texte, etc.
            $value;
            // Faire $value->getAttribute() ou $value["attribute"] est impossible
            // Utile lorsqu'on veut ne selectionner q'une seule valeur 
            // Exemple : SELECT COUNT(*) FROM ...
        }
        
        $advert1 = $qb->getQuery()->getOneOrNullResult();
        // $advert1 est une instance d'Advert dans notre exemple
        // Ou null si la requete ne contient pas de resultat
        // Et une exception a ete declenche si plus d'un resultat
        
        $advert2 = $qb->getQuery()->getSingleResult();
        // $advert2 est une instance d'Advert dans notre exemple
        // Une exception a ete declenchee si plus d'un resultat 
        // Une exception a ete declenchee si pas de resultat
        
        $advert3 = $qb->getQuery()->getSingleScalarResult();
        // $advert3 est directement la valeur du COUNT dans la requete exemple
        // Une exception a ete declenchee si plus d'un resultat 
        // Une exception a ete declenchee si pas de resultat
        // Exemple : SELECT COUNT(*) FROM Advert
    }
    
    public function exemple3 () {
        $qb = $this->createQueryBuilder("a");
        
        // Permet d'executer des requetes qui ne retournent pas de resultat 
        // Exemple : UPDATE, INSERT INTO, etc...
        $qb->getQuery()->execute();
        
        // Voici deux methodes strictement equivalentes :
        $results = $qb->getQuery()->getArrayResult();
        // <=>
        $results = $qb->getQuery()->execute(array(), Query::HYDRATE_ARRAY);
        // Le premier argument de execute() est un tableau de parametres 
        // Vous pouvez aussi passer par la methode setParameter(), au choix
        // Le deuxieme argument de excute() est la dite methode d'hydratation (objet, tableau, etc...)
    }
    
    
    // Utilisation du Doctrine Query Language (DQL)
    
    // Pour tester rapidement des requetes DQL ->
    // Dans le terminal :
    // php bin/console doctrine:query:dql "SELECT a FROM OCPlatformBundle:Advert a"
    
    public function myFindAllDQL() {
        $query = $this->_em->createQuery("SELECT a FROM OCPlatformBundle:Advert a");
        $results = $query->getResult();
        return $results;
    }
    
    public function myJoin() {
        $query = $this->_em->createQuery("SELECT a, u FROM OCPlatformBundle:Advert a JOIN a.user u WHERE u.age = 25");
        $results = $query->getResult();
        return $results;
    }
    
    public function funSQL() {
        $query = $this->_em->createQuery("SELECT a FROM OCPlatformBundle:Advert a WHERE TRIM(a.author) = 'Alexandre'");
        $results = $query->getResult();
        return $results;
    }
    
    public function select1Attribut() {
        $query = $this->_em->createQuery("SELECT a.title FROM OCPlatformBundle:Advert a WHERE a.id IN(1, 3, 5)");
        $results = $query->getResult();
        return $results;
    }
    
    // Utilisation de parametres
    public function myFindDQL($id) {
        $query = $this->_em->createQuery("SELECT a FROM OCPlatformBundle:Advert a WHERE a.id = :id");
        $query->setParameter("id", $id);
        
        // Utilisation de getSingleResult car la requete ne doit retourner qu'un seul resultat
        return $query->getSingleResult();
    }
    
    
    // Jointures avec le QueryBuilder
    
    public function getAdvertWithApplications() {
        $qb = $this
                ->createQueryBuilder("a")
                ->leftJoin("a.applications", "app")
                ->addSelect("app");
        
        return $qb
                ->getQuery()
                ->getResult();
    }
    
    public function addCond() {
        $qb->innerJoin("a.applications", "app", "WITH", "YEAR(app.date) > 2013");
        // Le troisieme argument est le type de la condition "WITH", et le quatrieme argument est ladite condition.
    }
    
    
    // Application : les repositories de notre plateforme d'annonces
    
    public function getAdvertWithCategories(array $categoryNames) {
        $qb = $this
                ->createQueryBuilder("a")
                ->innerJoin("a.categories", "c")
                ->addSelect("c");
        
        $qb->where($qb->expr()->in("c.name", $categoryNames));
        
        return $qb->getQuery()->getResult();
    }
    
    public function getAdverts($page, $nbPerPage) {
        $query = $this->createQueryBuilder("a")
                   // Jointure sur l'attribut image
                   ->leftJoin("a.image", "i")
                   ->addSelect("i")
                   // Jointure sur l'attribut categories
                   ->leftJoin("a.categories", "c")
                   ->addSelect("c")
                   ->orderBy("a.date","DESC")
                   ->getQuery();
        
        $query
            // On définit l'annonce à partir de laquelle commencer la liste
            ->setFirstResult(($page-1) * $nbPerPage)
            // Ainsi que le nombre d'annonce à afficher sur une page
            ->setMaxResults($nbPerPage);
        
        // Enfin, on retourne l'objet Paginator correspondant à la requête 
        // construite (n'oubliez pas le use correspondant)
        return new Paginator($query, true);
    }
}
